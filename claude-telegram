#!/usr/bin/env bash

set -e

# Default values
ALLOWED_USERS="1778189123,"
RUN_DIR="$HOME/.local/run"
PID_FILE="$RUN_DIR/claude-telegram.pid"
LOG_FILE="$RUN_DIR/claude-telegram.log"

# Ensure run directory exists
mkdir -pv "$RUN_DIR" >/dev/null 2>&1

# Function to show usage
show_usage() {
    echo "Usage: $0 <command> [options]"
    echo ""
    echo "Commands:"
    echo "  start               Start the bot daemon"
    echo "  stop                Stop the bot daemon"
    echo "  status              Show daemon status"
    echo "  restart             Restart the bot daemon"
    echo "  log                 Show daemon logs"
    echo ""
    echo "Start command options:"
    echo "  --token              Telegram bot token (required)"
    echo "  --working-directory  Approved directory path (required)"
    echo "  --bot-name          Telegram bot username (required)"
    echo "  --allowed-user      Allowed user ID (default: 1778189123,)"
    echo ""
    echo "Examples:"
    echo "  $0 start --token '1234567890:ABC-DEF1234ghIkl-zyx57W2v1u123ew11' --working-directory '/Users/yourname/projects' --bot-name 'my_claude_bot'"
    echo "  $0 stop"
    echo "  $0 status"
    echo "  $0 log"
}

# Function to check if daemon is running
is_running() {
    if [ -f "$PID_FILE" ]; then
        local pid=$(cat "$PID_FILE")
        if ps -p "$pid" > /dev/null 2>&1; then
            return 0
        else
            # PID file exists but process is not running
            rm -f "$PID_FILE"
            return 1
        fi
    else
        return 1
    fi
}

# Function to start the daemon
start_daemon() {
    if is_running; then
        echo "Bot daemon is already running (PID: $(cat "$PID_FILE"))"
        return 1
    fi

    # Parse start command arguments
    shift # Remove 'start' command
    while [[ $# -gt 0 ]]; do
        case $1 in
            --token)
                TELEGRAM_BOT_TOKEN="$2"
                shift 2
                ;;
            --working-directory)
                APPROVED_DIRECTORY="$2"
                shift 2
                ;;
            --bot-name)
                TELEGRAM_BOT_USERNAME="$2"
                shift 2
                ;;
            --allowed-user)
                ALLOWED_USERS="$2"
                shift 2
                ;;
            -h|--help)
                show_usage
                exit 0
                ;;
            *)
                echo "Unknown parameter: $1"
                show_usage
                exit 1
                ;;
        esac
    done

    # Check required parameters
    if [ -z "$TELEGRAM_BOT_TOKEN" ] || [ -z "$APPROVED_DIRECTORY" ] || [ -z "$TELEGRAM_BOT_USERNAME" ]; then
        echo "Error: Missing required parameters for start command"
        show_usage
        exit 1
    fi

    echo "Starting bot daemon..."

    # Check if poetry is installed, install if not
    if ! command -v poetry >/dev/null 2>&1; then
        echo "Poetry not found, installing..."
        curl -sSL https://install.python-poetry.org | python3 - >> "$LOG_FILE" 2>&1
        echo "Poetry installation completed"
    else
        echo "Poetry already installed"
    fi

    # Check if claude-code-telegram exists, clone if not
    if [ ! -d "$HOME/claude-code-telegram" ]; then
        echo "Cloning claude-code-telegram..."
        git clone https://github.com/RichardAtCT/claude-code-telegram --depth=1 ~/claude-code-telegram >> "$LOG_FILE" 2>&1
        echo "Repository cloned successfully"
    else
        echo "claude-code-telegram directory already exists"
    fi

    # Setup project dependencies
    echo "Setting up project dependencies..."
    (cd ~/claude-code-telegram && make dev) >> "$LOG_FILE" 2>&1

    # Generate .env file
    echo "Creating .env file..."
    cat > ~/claude-code-telegram/.env << EOF
TELEGRAM_BOT_TOKEN=$TELEGRAM_BOT_TOKEN
TELEGRAM_BOT_USERNAME=$TELEGRAM_BOT_USERNAME
APPROVED_DIRECTORY=$APPROVED_DIRECTORY
ALLOWED_USERS=$ALLOWED_USERS
EOF

    echo ".env file created successfully"

    # Start the bot as daemon
    echo "Starting bot daemon..."
    echo "$(date): Starting claude-telegram bot" >> "$LOG_FILE"
    
    nohup bash -c "cd ~/claude-code-telegram && make run" >> "$LOG_FILE" 2>&1 &
    local pid=$!
    echo "$pid" > "$PID_FILE"
    
    sleep 2
    if is_running; then
        echo "Bot daemon started successfully (PID: $pid)"
        echo "Logs: $LOG_FILE"
    else
        echo "Failed to start bot daemon"
        exit 1
    fi
}

# Function to stop the daemon
stop_daemon() {
    if ! is_running; then
        echo "Bot daemon is not running"
        return 1
    fi

    local pid=$(cat "$PID_FILE")
    echo "Stopping bot daemon (PID: $pid)..."
    
    # Kill the process and its children
    pkill -P "$pid" 2>/dev/null || true
    kill "$pid" 2>/dev/null || true
    
    # Wait for process to terminate
    local count=0
    while ps -p "$pid" > /dev/null 2>&1; do
        sleep 1
        count=$((count + 1))
        if [ $count -gt 10 ]; then
            echo "Force killing process..."
            kill -9 "$pid" 2>/dev/null || true
            break
        fi
    done
    
    rm -f "$PID_FILE"
    echo "$(date): Bot daemon stopped" >> "$LOG_FILE"
    echo "Bot daemon stopped"
}

# Function to show daemon status
show_status() {
    if is_running; then
        local pid=$(cat "$PID_FILE")
        echo "Bot daemon is running (PID: $pid)"
        echo "Log file: $LOG_FILE"
        echo "PID file: $PID_FILE"
    else
        echo "Bot daemon is not running"
    fi
}

# Function to restart the daemon
restart_daemon() {
    echo "Restarting bot daemon..."
    if is_running; then
        stop_daemon
        sleep 2
    fi
    
    # We need to re-read the .env file to get the original parameters
    if [ -f "$HOME/claude-code-telegram/.env" ]; then
        source "$HOME/claude-code-telegram/.env"
        start_daemon start --token "$TELEGRAM_BOT_TOKEN" --working-directory "$APPROVED_DIRECTORY" --bot-name "$TELEGRAM_BOT_USERNAME" --allowed-user "$ALLOWED_USERS"
    else
        echo "Error: Cannot restart - .env file not found. Please use 'start' command with parameters."
        exit 1
    fi
}

# Function to show logs
show_logs() {
    if [ -f "$LOG_FILE" ]; then
        tail -f "$LOG_FILE"
    else
        echo "Log file not found: $LOG_FILE"
        exit 1
    fi
}

# Main command processing
case "${1:-}" in
    start)
        start_daemon "$@"
        ;;
    stop)
        stop_daemon
        ;;
    status)
        show_status
        ;;
    restart)
        restart_daemon
        ;;
    log)
        show_logs
        ;;
    -h|--help|"")
        show_usage
        exit 0
        ;;
    *)
        echo "Unknown command: $1"
        show_usage
        exit 1
        ;;
esac